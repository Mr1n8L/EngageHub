# schema.graphqls

type Query {
    # Define queries if needed in the future
}

type Mutation {
    # User Registration
    registerUser(email: String!, password: String!): String!

    # User Login
    loginUser(email: String!, password: String!): String!

    # Password Recovery
    requestPasswordReset(email: String!): String!
    resetPassword(token: String!, newPassword: String!): String!

    # Two-Factor Authentication
    enableTwoFactorAuthentication(email: String!, method: String!): String!
    disableTwoFactorAuthentication(email: String!): String!

    # User Logout
    logoutUser: String!

    # Session Management
    endSession(sessionId: String!): String!

    # Role-Based Access Control
    assignRole(email: String!, role: String!): String!

    # Account Lockout
    lockAccount(email: String!): String!
    unlockAccount(email: String!): String!

    # Social Media Login Integration
    linkSocialMediaAccount(email: String!, socialMediaId: String!): String!
    unlinkSocialMediaAccount(email: String!, socialMediaId: String!): String!

    # Account Deactivation
    deactivateAccount(email: String!): String!
    reactivateAccount(email: String!): String!
}

type User {
    id: ID!
    email: String!
    password: String!
    emailVerified: Boolean!
}

type Session {
    id: ID!
    userId: ID!
    device: String!
    location: String!
}

type Role {
    name: String!
    permissions: [String!]!
}
